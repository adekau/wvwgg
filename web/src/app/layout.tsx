import { GeistSans } from "geist/font/sans";
import { CommandIcon, Globe, Swords, Trophy, Users } from "lucide-react";
import { type Metadata } from "next";
import { ThemeToggle } from "~/app/_components/theme-toggle";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "~/components/ui/breadcrumb";
import { Separator } from "~/components/ui/separator";
import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarHeader, SidebarInset, SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem, SidebarProvider, SidebarTrigger
} from "~/components/ui/sidebar";
import "~/styles/globals.css";
import { TRPCReactProvider } from "~/trpc/react";
import { ThemeProvider } from "./_components/theme-provider";

export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};
const data = {
  user: {
    name: "Commander",
    email: "commander@gw2.com",
    avatar: "/avatars/commander.jpg",
  },
  navMain: [
    {
      title: "Matches",
      url: "#",
      icon: Swords,
      isActive: true,
    },
    {
      title: "Leaderboard",
      url: "#",
      icon: Trophy,
      isActive: false,
    },
    {
      title: "Worlds",
      url: "#",
      icon: Globe,
      isActive: false,
    },
    {
      title: "Players",
      url: "#",
      icon: Users,
      isActive: false,
    },
  ],
  matches: {} as any,
}
export default function RootLayout({
  children,
  sidebar
}: Readonly<{
  children: React.ReactNode,
  sidebar: React.ReactNode
}>) {
  return (
    <html lang="en" className={`${GeistSans.variable}`} suppressHydrationWarning>
      <body>
        <TRPCReactProvider>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
            <SidebarProvider
              style={
                {
                  "--sidebar-width": "350px",
                } as React.CSSProperties
              }
            >
              {/* Sidebar */}
              <Sidebar collapsible="icon" className="overflow-hidden [&>[data-sidebar=sidebar]]:flex-row">
                {/* This is the first sidebar */}
                {/* We disable collapsible and adjust width to icon. */}
                {/* This will make the sidebar appear as icons. */}
                <Sidebar collapsible="none" className="!w-[calc(var(--sidebar-width-icon)_+_1px)] border-r">
                  <SidebarHeader>
                    <SidebarMenu>
                      <SidebarMenuItem>
                        <SidebarMenuButton size="lg" asChild className="md:h-8 md:p-0">
                          <a href="#">
                            <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                              <CommandIcon className="size-4" />
                            </div>
                            <div className="grid flex-1 text-left text-sm leading-tight">
                              <span className="truncate font-semibold">Acme Inc</span>
                              <span className="truncate text-xs">Enterprise</span>
                            </div>
                          </a>
                        </SidebarMenuButton>
                      </SidebarMenuItem>
                    </SidebarMenu>
                  </SidebarHeader>
                  <SidebarContent>
                    <SidebarGroup>
                      <SidebarGroupContent className="px-1.5 md:px-0">
                        <SidebarMenu>
                          {data.navMain.map((item) => (
                            <SidebarMenuItem key={item.title}>
                              <SidebarMenuButton
                                tooltip={{
                                  children: item.title,
                                  hidden: false,
                                }}
                                // isActive={activeItem?.title === item.title}
                                className="px-2.5 md:px-2"
                              >
                                <item.icon />
                                <span>{item.title}</span>
                              </SidebarMenuButton>
                            </SidebarMenuItem>
                          ))}
                        </SidebarMenu>
                      </SidebarGroupContent>
                    </SidebarGroup>
                  </SidebarContent>
                </Sidebar>

                <Sidebar collapsible="none" className="hidden flex-1 md:flex">
                  {sidebar}
                </Sidebar>
              </Sidebar>

              {/* Main content */}
              <SidebarInset>
                <header className="sticky top-0 flex shrink-0 items-center gap-2 border-b bg-background p-4">
                  <SidebarTrigger className="-ml-1" />
                  <Separator orientation="vertical" className="mr-2 h-4" />
                  <Breadcrumb className="flex-1">
                    <BreadcrumbList>
                      <BreadcrumbItem className="hidden md:block">
                        <BreadcrumbLink href="/matches">Matches</BreadcrumbLink>
                      </BreadcrumbItem>
                      <BreadcrumbSeparator className="hidden md:block" />
                      <BreadcrumbItem>
                        <BreadcrumbPage>Tier 1</BreadcrumbPage>
                      </BreadcrumbItem>
                    </BreadcrumbList>
                  </Breadcrumb>
                  <ThemeToggle />
                </header>
                {children}
              </SidebarInset>
            </SidebarProvider>
          </ThemeProvider>
        </TRPCReactProvider>
      </body>
    </html>
  );
}
